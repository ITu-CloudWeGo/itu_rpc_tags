// Code generated by Kitex v0.12.3. DO NOT EDIT.

package tagsservice

import (
	"context"
	"errors"
	tags_service "github.com/ITu-CloudWeGo/itu_rpc_tags/kitex_gen/tags_service"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateTags": kitex.NewMethodInfo(
		createTagsHandler,
		newCreateTagsArgs,
		newCreateTagsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DelTags": kitex.NewMethodInfo(
		delTagsHandler,
		newDelTagsArgs,
		newDelTagsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	tagsServiceServiceInfo                = NewServiceInfo()
	tagsServiceServiceInfoForClient       = NewServiceInfoForClient()
	tagsServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return tagsServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return tagsServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return tagsServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TagsService"
	handlerType := (*tags_service.TagsService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "tags",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func createTagsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(tags_service.CreateTagsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(tags_service.TagsService).CreateTags(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateTagsArgs:
		success, err := handler.(tags_service.TagsService).CreateTags(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateTagsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateTagsArgs() interface{} {
	return &CreateTagsArgs{}
}

func newCreateTagsResult() interface{} {
	return &CreateTagsResult{}
}

type CreateTagsArgs struct {
	Req *tags_service.CreateTagsRequest
}

func (p *CreateTagsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(tags_service.CreateTagsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateTagsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateTagsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateTagsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateTagsArgs) Unmarshal(in []byte) error {
	msg := new(tags_service.CreateTagsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateTagsArgs_Req_DEFAULT *tags_service.CreateTagsRequest

func (p *CreateTagsArgs) GetReq() *tags_service.CreateTagsRequest {
	if !p.IsSetReq() {
		return CreateTagsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateTagsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateTagsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateTagsResult struct {
	Success *tags_service.CreateTagsResponse
}

var CreateTagsResult_Success_DEFAULT *tags_service.CreateTagsResponse

func (p *CreateTagsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(tags_service.CreateTagsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateTagsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateTagsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateTagsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateTagsResult) Unmarshal(in []byte) error {
	msg := new(tags_service.CreateTagsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateTagsResult) GetSuccess() *tags_service.CreateTagsResponse {
	if !p.IsSetSuccess() {
		return CreateTagsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateTagsResult) SetSuccess(x interface{}) {
	p.Success = x.(*tags_service.CreateTagsResponse)
}

func (p *CreateTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTagsResult) GetResult() interface{} {
	return p.Success
}

func delTagsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(tags_service.DelTagsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(tags_service.TagsService).DelTags(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DelTagsArgs:
		success, err := handler.(tags_service.TagsService).DelTags(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelTagsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDelTagsArgs() interface{} {
	return &DelTagsArgs{}
}

func newDelTagsResult() interface{} {
	return &DelTagsResult{}
}

type DelTagsArgs struct {
	Req *tags_service.DelTagsRequest
}

func (p *DelTagsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(tags_service.DelTagsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DelTagsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DelTagsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DelTagsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DelTagsArgs) Unmarshal(in []byte) error {
	msg := new(tags_service.DelTagsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelTagsArgs_Req_DEFAULT *tags_service.DelTagsRequest

func (p *DelTagsArgs) GetReq() *tags_service.DelTagsRequest {
	if !p.IsSetReq() {
		return DelTagsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelTagsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DelTagsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DelTagsResult struct {
	Success *tags_service.DelTagsResponse
}

var DelTagsResult_Success_DEFAULT *tags_service.DelTagsResponse

func (p *DelTagsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(tags_service.DelTagsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DelTagsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DelTagsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DelTagsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DelTagsResult) Unmarshal(in []byte) error {
	msg := new(tags_service.DelTagsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelTagsResult) GetSuccess() *tags_service.DelTagsResponse {
	if !p.IsSetSuccess() {
		return DelTagsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelTagsResult) SetSuccess(x interface{}) {
	p.Success = x.(*tags_service.DelTagsResponse)
}

func (p *DelTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DelTagsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateTags(ctx context.Context, Req *tags_service.CreateTagsRequest) (r *tags_service.CreateTagsResponse, err error) {
	var _args CreateTagsArgs
	_args.Req = Req
	var _result CreateTagsResult
	if err = p.c.Call(ctx, "CreateTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelTags(ctx context.Context, Req *tags_service.DelTagsRequest) (r *tags_service.DelTagsResponse, err error) {
	var _args DelTagsArgs
	_args.Req = Req
	var _result DelTagsResult
	if err = p.c.Call(ctx, "DelTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
