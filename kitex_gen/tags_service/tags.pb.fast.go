// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package tags_service

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *PidTidCreateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PidTidCreateRequest[number], err)
}

func (x *PidTidCreateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PidTidCreateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Tag, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PidTidCreateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PidTidCreateResponse[number], err)
}

func (x *PidTidCreateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PidTidCreateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PidTidCreateResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PidTidCreateResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Tid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTagsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTagsRequest[number], err)
}

func (x *GetTagsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Tid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTagsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTagsResponse[number], err)
}

func (x *GetTagsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTagsResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetTagsResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Tag, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetTagIDRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTagIDRequest[number], err)
}

func (x *GetTagIDRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTagIDResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTagIDResponse[number], err)
}

func (x *GetTagIDResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTagIDResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetTagIDResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Tid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PidTidCreateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PidTidCreateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Pid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPid())
	return offset
}

func (x *PidTidCreateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Tag == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTag())
	return offset
}

func (x *PidTidCreateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *PidTidCreateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatus())
	return offset
}

func (x *PidTidCreateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *PidTidCreateResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Pid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPid())
	return offset
}

func (x *PidTidCreateResponse) fastWriteField4(buf []byte) (offset int) {
	if x.Tid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTid())
	return offset
}

func (x *GetTagsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetTagsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Tid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTid())
	return offset
}

func (x *GetTagsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetTagsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatus())
	return offset
}

func (x *GetTagsResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetTagsResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Tag == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTag())
	return offset
}

func (x *GetTagIDRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetTagIDRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Pid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPid())
	return offset
}

func (x *GetTagIDResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetTagIDResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatus())
	return offset
}

func (x *GetTagIDResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetTagIDResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Tid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetTid())
	return offset
}

func (x *PidTidCreateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PidTidCreateRequest) sizeField1() (n int) {
	if x.Pid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPid())
	return n
}

func (x *PidTidCreateRequest) sizeField2() (n int) {
	if x.Tag == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTag())
	return n
}

func (x *PidTidCreateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *PidTidCreateResponse) sizeField1() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatus())
	return n
}

func (x *PidTidCreateResponse) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *PidTidCreateResponse) sizeField3() (n int) {
	if x.Pid == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPid())
	return n
}

func (x *PidTidCreateResponse) sizeField4() (n int) {
	if x.Tid == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTid())
	return n
}

func (x *GetTagsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetTagsRequest) sizeField1() (n int) {
	if x.Tid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTid())
	return n
}

func (x *GetTagsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetTagsResponse) sizeField1() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatus())
	return n
}

func (x *GetTagsResponse) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetTagsResponse) sizeField3() (n int) {
	if x.Tag == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTag())
	return n
}

func (x *GetTagIDRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetTagIDRequest) sizeField1() (n int) {
	if x.Pid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPid())
	return n
}

func (x *GetTagIDResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetTagIDResponse) sizeField1() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatus())
	return n
}

func (x *GetTagIDResponse) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetTagIDResponse) sizeField3() (n int) {
	if x.Tid == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetTid())
	return n
}

var fieldIDToName_PidTidCreateRequest = map[int32]string{
	1: "Pid",
	2: "Tag",
}

var fieldIDToName_PidTidCreateResponse = map[int32]string{
	1: "Status",
	2: "Msg",
	3: "Pid",
	4: "Tid",
}

var fieldIDToName_GetTagsRequest = map[int32]string{
	1: "Tid",
}

var fieldIDToName_GetTagsResponse = map[int32]string{
	1: "Status",
	2: "Msg",
	3: "Tag",
}

var fieldIDToName_GetTagIDRequest = map[int32]string{
	1: "Pid",
}

var fieldIDToName_GetTagIDResponse = map[int32]string{
	1: "Status",
	2: "Msg",
	3: "Tid",
}
