// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package tags_service

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateTagsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateTagsRequest[number], err)
}

func (x *CreateTagsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *CreateTagsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Tags, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateTagsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateTagsResponse[number], err)
}

func (x *CreateTagsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateTagsResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DelTagsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DelTagsRequest[number], err)
}

func (x *DelTagsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *DelTagsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Tags, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DelTagsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DelTagsResponse[number], err)
}

func (x *DelTagsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DelTagsResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateTagsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateTagsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Pid == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetPid())
	return offset
}

func (x *CreateTagsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Tags == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTags())
	return offset
}

func (x *CreateTagsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateTagsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatus())
	return offset
}

func (x *CreateTagsResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *DelTagsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DelTagsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Pid == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetPid())
	return offset
}

func (x *DelTagsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Tags == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTags())
	return offset
}

func (x *DelTagsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DelTagsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatus())
	return offset
}

func (x *DelTagsResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *CreateTagsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateTagsRequest) sizeField1() (n int) {
	if x.Pid == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetPid())
	return n
}

func (x *CreateTagsRequest) sizeField2() (n int) {
	if x.Tags == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTags())
	return n
}

func (x *CreateTagsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateTagsResponse) sizeField1() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatus())
	return n
}

func (x *CreateTagsResponse) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *DelTagsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DelTagsRequest) sizeField1() (n int) {
	if x.Pid == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetPid())
	return n
}

func (x *DelTagsRequest) sizeField2() (n int) {
	if x.Tags == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTags())
	return n
}

func (x *DelTagsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DelTagsResponse) sizeField1() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatus())
	return n
}

func (x *DelTagsResponse) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

var fieldIDToName_CreateTagsRequest = map[int32]string{
	1: "Pid",
	2: "Tags",
}

var fieldIDToName_CreateTagsResponse = map[int32]string{
	1: "Status",
	2: "Msg",
}

var fieldIDToName_DelTagsRequest = map[int32]string{
	1: "Pid",
	2: "Tags",
}

var fieldIDToName_DelTagsResponse = map[int32]string{
	1: "Status",
	2: "Msg",
}
